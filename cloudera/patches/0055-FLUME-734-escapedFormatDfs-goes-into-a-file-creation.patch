From f40827cf67f0d543e4b5ba591dd2fd03e7f51020 Mon Sep 17 00:00:00 2001
From: Jonathan Hsieh <jon@cloudera.com>
Date: Wed, 10 Aug 2011 07:31:15 -0700
Subject: [PATCH 55/65] FLUME-734: escapedFormatDfs goes into a file creation frenzy

---
 .../cloudera/flume/conf/FlumeConfiguration.java    |   24 +++++++++++++--
 .../com/cloudera/flume/conf/SinkBuilderUtil.java   |    4 ++
 .../flume/handlers/hdfs/EscapedCustomDfsSink.java  |   31 ++++++++++++++++----
 .../handlers/hdfs/TestEscapedCustomOutputDfs.java  |   29 ++++++++++++++++++
 .../flume/handlers/rolling/TestRollSink.java       |    4 +-
 5 files changed, 80 insertions(+), 12 deletions(-)

diff --git a/flume-core/src/main/java/com/cloudera/flume/conf/FlumeConfiguration.java b/flume-core/src/main/java/com/cloudera/flume/conf/FlumeConfiguration.java
index cb4bf71..05e23fc 100644
--- a/flume-core/src/main/java/com/cloudera/flume/conf/FlumeConfiguration.java
+++ b/flume-core/src/main/java/com/cloudera/flume/conf/FlumeConfiguration.java
@@ -32,6 +32,7 @@ import org.apache.hadoop.fs.Path;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.cloudera.flume.conf.FlumeBuilder.FunctionSpec;
 import com.cloudera.util.Pair;
 import com.google.common.base.Preconditions;
 
@@ -940,6 +941,21 @@ public class FlumeConfiguration extends Configuration {
     return get(COLLECTOR_OUTPUT_FORMAT, "avrojson");
   }
 
+  public FunctionSpec getDefaultOutputFormatSpec() {
+    // Look at FormatFactory for possible values.
+    String defaultFormat = "avrojson";
+    String fmt = get(COLLECTOR_OUTPUT_FORMAT, defaultFormat);
+    Object fmtSpec = null;
+    try {
+      fmtSpec = FlumeBuilder.buildSimpleArg(FlumeBuilder.parseArg(fmt));
+    } catch (Exception e) {
+      LOG.warn("Problem parsing output format '" + fmt + "'; defaulting to "
+          + defaultFormat);
+      fmtSpec = new FunctionSpec(defaultFormat);
+    }
+    return (FunctionSpec)fmtSpec;
+  }
+
   public String getGangliaServers() {
     // gmond's default multicast ip and port
     return get(GANGLIA_SERVERS, "239.2.11.71:8649");
@@ -1005,8 +1021,8 @@ public class FlumeConfiguration extends Configuration {
     if (home == null) {
       home = ".";
     }
-    return home + File.separator + get(WEBAPP_ROOT_MASTER,
-      "webapps/flumemaster.war");
+    return home + File.separator
+        + get(WEBAPP_ROOT_MASTER, "webapps/flumemaster.war");
   }
 
   /**
@@ -1017,8 +1033,8 @@ public class FlumeConfiguration extends Configuration {
     if (home == null) {
       home = ".";
     }
-    return home + File.separator + get(WEBAPP_ROOT_NODE,
-        "webapps/flumeagent.war");
+    return home + File.separator
+        + get(WEBAPP_ROOT_NODE, "webapps/flumeagent.war");
   }
 
   /**
diff --git a/flume-core/src/main/java/com/cloudera/flume/conf/SinkBuilderUtil.java b/flume-core/src/main/java/com/cloudera/flume/conf/SinkBuilderUtil.java
index 2aaa566..6b9702c 100644
--- a/flume-core/src/main/java/com/cloudera/flume/conf/SinkBuilderUtil.java
+++ b/flume-core/src/main/java/com/cloudera/flume/conf/SinkBuilderUtil.java
@@ -73,4 +73,8 @@ public class SinkBuilderUtil {
     }
     return FlumeBuilder.createFormat(FormatFactory.get(), format);
   }
+
+  public static FunctionSpec getDefaultOutputFormatSpec() {
+    return FlumeConfiguration.get().getDefaultOutputFormatSpec();
+  }
 }
diff --git a/flume-core/src/main/java/com/cloudera/flume/handlers/hdfs/EscapedCustomDfsSink.java b/flume-core/src/main/java/com/cloudera/flume/handlers/hdfs/EscapedCustomDfsSink.java
index 20ebdfd..821f565 100644
--- a/flume-core/src/main/java/com/cloudera/flume/handlers/hdfs/EscapedCustomDfsSink.java
+++ b/flume-core/src/main/java/com/cloudera/flume/handlers/hdfs/EscapedCustomDfsSink.java
@@ -55,7 +55,8 @@ import com.google.common.base.Preconditions;
 public class EscapedCustomDfsSink extends EventSink.Base {
   static final Logger LOG = LoggerFactory.getLogger(EscapedCustomDfsSink.class);
   final String path;
-  OutputFormat format;
+  FunctionSpec formatSpec;
+  Context ctx;
 
   CustomDfsSink writer = null;
 
@@ -71,11 +72,13 @@ public class EscapedCustomDfsSink extends EventSink.Base {
   private String filename = "";
   protected String absolutePath = "";
 
-  public EscapedCustomDfsSink(String path, String filename, OutputFormat o) {
+  public EscapedCustomDfsSink(Context ctx, String path, String filename,
+      FunctionSpec fs) {
+    this.ctx = ctx;
     this.path = path;
     this.filename = filename;
     shouldSub = Event.containsTag(path) || Event.containsTag(filename);
-    this.format = o;
+    this.formatSpec = fs;
     absolutePath = path;
     if (filename != null && filename.length() > 0) {
       if (!absolutePath.endsWith(Path.SEPARATOR)) {
@@ -95,12 +98,21 @@ public class EscapedCustomDfsSink extends EventSink.Base {
     }
   }
 
-  public EscapedCustomDfsSink(String path, String filename) {
-    this(path, filename, getDefaultOutputFormat());
+  public EscapedCustomDfsSink(Context ctx, String path, String filename) {
+    this(ctx, path, filename, SinkBuilderUtil.getDefaultOutputFormatSpec());
   }
 
   protected CustomDfsSink openWriter(String p) throws IOException {
     LOG.info("Opening " + p);
+    // We need to instantiate a new outputFormat for each CustomDfsSink.
+    OutputFormat format;
+    try {
+      format = SinkBuilderUtil.resolveOutputFormat(ctx, formatSpec);
+    } catch (FlumeSpecException e) {
+      format = getDefaultOutputFormat();
+      LOG.warn("Had problem creating format " + formatSpec
+          + "; reverting to default:" + format);
+    }
     CustomDfsSink w = new CustomDfsSink(p, format);
     w.open();
     return w;
@@ -179,7 +191,14 @@ public class EscapedCustomDfsSink extends EventSink.Base {
         Preconditions.checkArgument(o != null, "Illegal format type "
             + formatArg + ".");
 
-        return new EscapedCustomDfsSink(args[0].toString(), filename, o);
+        // handle legacy string format arguments 
+        // TODO only support FunctionSpec in the future
+        if (formatArg instanceof String) {
+          formatArg = new FunctionSpec((String) formatArg);
+        }
+        FunctionSpec formatFunc = (FunctionSpec) formatArg;
+        return new EscapedCustomDfsSink(context, args[0].toString(), filename,
+            formatFunc);
       }
 
       @Deprecated
diff --git a/flume-core/src/test/java/com/cloudera/flume/handlers/hdfs/TestEscapedCustomOutputDfs.java b/flume-core/src/test/java/com/cloudera/flume/handlers/hdfs/TestEscapedCustomOutputDfs.java
index 7618acd..5037d30 100644
--- a/flume-core/src/test/java/com/cloudera/flume/handlers/hdfs/TestEscapedCustomOutputDfs.java
+++ b/flume-core/src/test/java/com/cloudera/flume/handlers/hdfs/TestEscapedCustomOutputDfs.java
@@ -204,4 +204,33 @@ public class TestEscapedCustomOutputDfs {
     FlumeBuilder.buildSink(new Context(), src);
   }
 
+  /**
+   * Some output formats cache an output stream and each hdfs file thus needs to
+   * make sure it has its own copy of the outputStream.
+   * 
+   * @throws IOException
+   * @throws FlumeSpecException
+   * @throws InterruptedException
+   */
+  @Test
+  public void testNoOutputFormatSharingProblem() throws IOException,
+      FlumeSpecException, InterruptedException {
+    File f = FileUtil.mktempdir("newFileOutputFormatPer");
+    String snk = "escapedFormatDfs(\"file://" + f.getAbsoluteFile()
+        + "\", \"%{nanos}\", seqfile)";
+
+    Event e1 = new EventImpl("e1".getBytes());
+    Event e2 = new EventImpl("e2".getBytes());
+
+    EventSink evtSnk = FlumeBuilder.buildSink(new Context(), snk);
+
+    try {
+      evtSnk.open();
+      evtSnk.append(e1);
+      evtSnk.append(e2);
+      evtSnk.close();
+    } finally {
+      FileUtil.rmr(f);
+    }
+  }
 }
diff --git a/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestRollSink.java b/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestRollSink.java
index 3096f59..761643d 100644
--- a/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestRollSink.java
+++ b/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestRollSink.java
@@ -90,7 +90,7 @@ public class TestRollSink {
         10000), 250) {
       @Override
       protected EventSink newSink(Context ctx) throws IOException {
-        return new EscapedCustomDfsSink("file:///" + f.getPath(),
+        return new EscapedCustomDfsSink(ctx, "file:///" + f.getPath(),
             "sub-%{service}%{rolltag}");
       }
     };
@@ -417,7 +417,7 @@ public class TestRollSink {
         10000), 250) {
       @Override
       protected EventSink newSink(Context ctx) throws IOException {
-        return new EscapedCustomDfsSink("file:///" + f.getPath(),
+        return new EscapedCustomDfsSink(ctx, "file:///" + f.getPath(),
             "sub-%{service}%{rolltag}");
       }
     };
-- 
1.7.0.4

