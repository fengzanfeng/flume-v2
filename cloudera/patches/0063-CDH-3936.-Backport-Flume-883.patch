From aea41e51be4aff1b00f4f1a5baffe900e9542f7a Mon Sep 17 00:00:00 2001
From: Prasad Mujumdar <prasadm@cloudera.com>
Date: Fri, 16 Dec 2011 16:39:54 -0800
Subject: [PATCH 63/65] CDH-3936. Backport Flume-883

---
 .../cloudera/flume/collector/CollectorSink.java    |   33 +++++++++++++++----
 .../cloudera/flume/conf/FlumeConfiguration.java    |    5 +++
 .../flume/collector/TestCollectorSink.java         |    1 +
 3 files changed, 32 insertions(+), 7 deletions(-)

diff --git a/flume-core/src/main/java/com/cloudera/flume/collector/CollectorSink.java b/flume-core/src/main/java/com/cloudera/flume/collector/CollectorSink.java
index 20f60c6..a9d2a80 100644
--- a/flume-core/src/main/java/com/cloudera/flume/collector/CollectorSink.java
+++ b/flume-core/src/main/java/com/cloudera/flume/collector/CollectorSink.java
@@ -71,6 +71,7 @@ public class CollectorSink extends EventSink.Base {
   AckAccumulator accum = new AckAccumulator();
   final AckListener ackDest;
   final String snkSpec;
+  final boolean cleanupOnClose;
 
   // This is a container for acks that should be ready for delivery when the
   // hdfs sink is closed/flushed
@@ -88,6 +89,7 @@ public class CollectorSink extends EventSink.Base {
       final Tagger tagger, long checkmillis, AckListener ackDest) {
     this.ackDest = ackDest;
     this.snkSpec = snkSpec;
+    cleanupOnClose = FlumeConfiguration.get().getCollectorCloseErrorCleanup();
     roller = new RollSink(ctx, snkSpec, new TimeTrigger(tagger, millis),
         checkmillis) {
       // this is wraps the normal roll sink with an extra roll detection
@@ -167,13 +169,28 @@ public class CollectorSink extends EventSink.Base {
 
     @Override
     public void close() throws IOException, InterruptedException {
-      LOG.debug("closing roll detect deco {}", tag);
-      super.close();
-      flushRollAcks();
-      LOG.debug("closed  roll detect deco {}", tag);
+      try {
+        LOG.debug("closing roll detect deco {}", tag);
+        super.close();
+        clearRollAcks(true);
+        LOG.debug("closed  roll detect deco {}", tag);
+      } catch (IOException eI) {
+        /* For most sinks, if the close due to IO error then the events
+         * are not saved and need to be resent. We need to clear these
+         * acks since these events are lost. Otherwise the next successful
+         * would flush those and agent won't resend the data.
+         * If the sink can ignore the error, then
+         * flume.collector.close.cleanup needs to be set to false.
+         */
+        LOG.debug("Error in close, clearing roll acks {}", tag);
+        if (cleanupOnClose == true) {
+          clearRollAcks(false);
+        }
+        throw eI;
+      }
     }
 
-    void flushRollAcks() throws IOException {
+    private void clearRollAcks(boolean flushAcks) throws IOException {
       AckListener master = ackDest;
       Collection<String> acktags;
       synchronized (rollAckSet) {
@@ -182,8 +199,10 @@ public class CollectorSink extends EventSink.Base {
         LOG.debug("Roll closed, pushing acks for " + tag + " :: " + acktags);
       }
 
-      for (String at : acktags) {
-        master.end(at);
+      if (flushAcks == true) {
+        for (String at : acktags) {
+          master.end(at);
+        }
       }
     }
   };
diff --git a/flume-core/src/main/java/com/cloudera/flume/conf/FlumeConfiguration.java b/flume-core/src/main/java/com/cloudera/flume/conf/FlumeConfiguration.java
index e972cb8..88a5425 100644
--- a/flume-core/src/main/java/com/cloudera/flume/conf/FlumeConfiguration.java
+++ b/flume-core/src/main/java/com/cloudera/flume/conf/FlumeConfiguration.java
@@ -185,6 +185,7 @@ public class FlumeConfiguration extends Configuration {
   public static final String COLLECTOR_ROLL_TIMEOUT = "flume.collector.roll.timeout";
   public static final String COLLECTOR_OUTPUT_FORMAT = "flume.collector.output.format";
   public static final String COLLECTOR_DFS_COMPRESS_CODEC = "flume.collector.dfs.compress.codec";
+  public static final String COLLECTOR_CLOSE_ERROR_CLEANUP = "flume.collector.close.cleanup";
 
   // TODO(henry) move these to flume.master - they now tell the master which
   // interface / port to start up on
@@ -604,6 +605,10 @@ public class FlumeConfiguration extends Configuration {
     return getInt(COLLECTOR_EVENT_PORT, 35853);
   }
 
+  public boolean getCollectorCloseErrorCleanup() {
+    return getBoolean(COLLECTOR_CLOSE_ERROR_CLEANUP, true);
+  }
+
   /**
    * This returns the type of RPC mechanism (Thrift or Avro) chosen for the
    * FlumeEventServer.
diff --git a/flume-core/src/test/java/com/cloudera/flume/collector/TestCollectorSink.java b/flume-core/src/test/java/com/cloudera/flume/collector/TestCollectorSink.java
index 4f25f58..9e0a70a 100644
--- a/flume-core/src/test/java/com/cloudera/flume/collector/TestCollectorSink.java
+++ b/flume-core/src/test/java/com/cloudera/flume/collector/TestCollectorSink.java
@@ -46,6 +46,7 @@ import com.cloudera.flume.agent.durability.WALManager;
 import com.cloudera.flume.conf.Context;
 import com.cloudera.flume.conf.FlumeArgException;
 import com.cloudera.flume.conf.FlumeBuilder;
+import com.cloudera.flume.conf.FlumeConfiguration;
 import com.cloudera.flume.conf.FlumeSpecException;
 import com.cloudera.flume.conf.LogicalNodeContext;
 import com.cloudera.flume.conf.ReportTestingContext;
-- 
1.7.0.4

