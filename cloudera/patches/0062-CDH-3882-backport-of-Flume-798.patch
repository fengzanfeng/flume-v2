From 6d314e3e21cd374adbc750eea4d22a11ab23b9b9 Mon Sep 17 00:00:00 2001
From: Prasad Mujumdar <prasadm@cloudera.com>
Date: Fri, 16 Dec 2011 16:06:35 -0800
Subject: [PATCH 62/65] CDH-3882, backport of Flume-798

---
 .../cloudera/flume/conf/FlumeConfiguration.java    |    5 +
 .../cloudera/flume/core/EventSinkDecorator.java    |    8 +-
 .../flume/handlers/debug/StubbornAppendSink.java   |    8 +-
 .../cloudera/flume/handlers/rolling/RollSink.java  |   50 ++++-
 .../flume/collector/TestCollectorSink.java         |   99 ----------
 .../flume/handlers/rolling/TestRollRollTags.java   |    8 +-
 .../flume/handlers/rolling/TestRollSink.java       |    5 +-
 .../flume/handlers/rolling/TestSlowSinkRoll.java   |  205 ++++++++++++++++++++
 8 files changed, 261 insertions(+), 127 deletions(-)
 create mode 100644 flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestSlowSinkRoll.java

diff --git a/flume-core/src/main/java/com/cloudera/flume/conf/FlumeConfiguration.java b/flume-core/src/main/java/com/cloudera/flume/conf/FlumeConfiguration.java
index 05e23fc..e972cb8 100644
--- a/flume-core/src/main/java/com/cloudera/flume/conf/FlumeConfiguration.java
+++ b/flume-core/src/main/java/com/cloudera/flume/conf/FlumeConfiguration.java
@@ -182,6 +182,7 @@ public class FlumeConfiguration extends Configuration {
   public final static String COLLECTOR_EVENT_PORT = "flume.collector.event.port";
   public static final String COLLECTOR_DFS_DIR = "flume.collector.dfs.dir";
   public static final String COLLECTOR_ROLL_MILLIS = "flume.collector.roll.millis";
+  public static final String COLLECTOR_ROLL_TIMEOUT = "flume.collector.roll.timeout";
   public static final String COLLECTOR_OUTPUT_FORMAT = "flume.collector.output.format";
   public static final String COLLECTOR_DFS_COMPRESS_CODEC = "flume.collector.dfs.compress.codec";
 
@@ -633,6 +634,10 @@ public class FlumeConfiguration extends Configuration {
     return getLong(COLLECTOR_ROLL_MILLIS, 30000);
   }
 
+  public long getCollectorRollTimeout() {
+    return getLong(COLLECTOR_ROLL_TIMEOUT, 1000);
+  }
+
   /**
    * This is the list of masters that agent nodes will connect to
    */
diff --git a/flume-core/src/main/java/com/cloudera/flume/core/EventSinkDecorator.java b/flume-core/src/main/java/com/cloudera/flume/core/EventSinkDecorator.java
index 7792040..6ab39ba 100644
--- a/flume-core/src/main/java/com/cloudera/flume/core/EventSinkDecorator.java
+++ b/flume-core/src/main/java/com/cloudera/flume/core/EventSinkDecorator.java
@@ -64,12 +64,8 @@ public class EventSinkDecorator<S extends EventSink> extends EventSink.Base {
   @Override
   public void close() throws IOException, InterruptedException {
     Preconditions.checkNotNull(sink);
-    try {
-      sink.close();
-    } finally {
-      // mark it closed regardless the downstream close exception
-      isOpen.set(false);
-    }
+    sink.close();
+    isOpen.set(false);
   }
 
   @Override
diff --git a/flume-core/src/main/java/com/cloudera/flume/handlers/debug/StubbornAppendSink.java b/flume-core/src/main/java/com/cloudera/flume/handlers/debug/StubbornAppendSink.java
index 98d5690..9436eb4 100644
--- a/flume-core/src/main/java/com/cloudera/flume/handlers/debug/StubbornAppendSink.java
+++ b/flume-core/src/main/java/com/cloudera/flume/handlers/debug/StubbornAppendSink.java
@@ -82,12 +82,8 @@ public class StubbornAppendSink<S extends EventSink> extends
       LOG.info("append failed on event '{}' with error: {}", e, ex.getMessage());
 
       appendFails.incrementAndGet();
-      try {
-        super.close(); // close
-      } catch (IOException eI) {
-        // Ignore the IOexception in close and continue to reopen
-        LOG.error("Error in closing Stubborn Append Sink" , eI);
-      }
+      super.close(); // close
+
       open(); // attempt to reopen
       super.append(e); // resend
       appendSuccesses.incrementAndGet();
diff --git a/flume-core/src/main/java/com/cloudera/flume/handlers/rolling/RollSink.java b/flume-core/src/main/java/com/cloudera/flume/handlers/rolling/RollSink.java
index ce3e862..16c444a 100644
--- a/flume-core/src/main/java/com/cloudera/flume/handlers/rolling/RollSink.java
+++ b/flume-core/src/main/java/com/cloudera/flume/handlers/rolling/RollSink.java
@@ -36,6 +36,7 @@ import org.slf4j.LoggerFactory;
 
 import com.cloudera.flume.conf.Context;
 import com.cloudera.flume.conf.FlumeBuilder;
+import com.cloudera.flume.conf.FlumeConfiguration;
 import com.cloudera.flume.conf.FlumeSpecException;
 import com.cloudera.flume.conf.FlumeBuilder.FunctionSpec;
 import com.cloudera.flume.conf.SinkFactory.SinkBuilder;
@@ -68,11 +69,14 @@ public class RollSink extends EventSink.Base {
   private static int threadInitNumber = 0;
   final long checkLatencyMs; // default 4x a second
   private Context ctx; // roll context
+  private long timeOut; // lock wait timeout
+  private boolean forceInterrupt = true;
 
   // reporting attributes and counters
   public final static String A_ROLLS = "rolls";
   public final static String A_ROLLFAILS = "rollfails";
   public final static String A_ROLLSPEC = "rollspec";
+  public final static String A_ROLL_ABORTED_APPENDS = "rollCanceledAppends";
   public final String A_ROLL_TAG; // TODO (jon) parameterize this.
   public final static String DEFAULT_ROLL_TAG = "rolltag";
 
@@ -80,6 +84,7 @@ public class RollSink extends EventSink.Base {
 
   final AtomicLong rolls = new AtomicLong();
   final AtomicLong rollfails = new AtomicLong();
+  final AtomicLong rollCaneledAppends = new AtomicLong();
 
   public RollSink(Context ctx, String spec, long maxAge, long checkMs) {
     this.ctx = ctx;
@@ -87,6 +92,7 @@ public class RollSink extends EventSink.Base {
     this.fspec = spec;
     this.trigger = new TimeTrigger(new ProcessTagger(), maxAge);
     this.checkLatencyMs = checkMs;
+    setTimeOut(FlumeConfiguration.get().getCollectorRollTimeout());
     LOG.info("Created RollSink: maxAge=" + maxAge + "ms trigger=[" + trigger
         + "] checkPeriodMs = " + checkLatencyMs + " spec='" + fspec + "'");
   }
@@ -97,6 +103,7 @@ public class RollSink extends EventSink.Base {
     this.fspec = spec;
     this.trigger = trigger;
     this.checkLatencyMs = checkMs;
+    setTimeOut(FlumeConfiguration.get().getCollectorRollTimeout());
     LOG.info("Created RollSink: trigger=[" + trigger + "] checkPeriodMs = "
         + checkLatencyMs + " spec='" + fspec + "'");
   }
@@ -205,12 +212,10 @@ public class RollSink extends EventSink.Base {
         throw new RuntimeException(e1.getCause());
       }
     } catch (CancellationException ce) {
-      Thread.currentThread().interrupt();
-      throw new InterruptedException(
+      throw new RuntimeException(
           "Blocked append interrupted by rotation event");
     } catch (InterruptedException ex) {
       LOG.warn("Unexpected Exception " + ex.getMessage(), ex);
-      Thread.currentThread().interrupt();
       throw (InterruptedException) ex;
     }
   }
@@ -228,7 +233,18 @@ public class RollSink extends EventSink.Base {
     }
     String tag = trigger.getTagger().getTag();
 
-    e.set(A_ROLL_TAG, tag.getBytes());
+    /* Note that if the directdriver is re-trying this event due to error in
+     * last append, then the event will already have the roll tag
+     * In that case, we want to continue using such event
+     */
+    try {
+      e.set(A_ROLL_TAG, tag.getBytes());
+    } catch (IllegalArgumentException eI) {
+      // if there's a previous rolltag then use it, else rethrow the exception
+      if (e.get(A_ROLL_TAG) == null)
+        throw eI;
+    }
+
     lock.readLock().lock();
     try {
       curSink.append(e);
@@ -264,10 +280,18 @@ public class RollSink extends EventSink.Base {
   }
 
   public boolean rotate() throws InterruptedException {
-    while (!lock.writeLock().tryLock(1000, TimeUnit.MILLISECONDS)) {
+    while (!lock.writeLock().tryLock(timeOut, TimeUnit.MILLISECONDS)) {
       // interrupt the future on the other.
       if (future != null) {
+        if (forceInterrupt == false) {
+          /* If the node is configured not to interrupt an append,
+           * then bail out. The next append or roll will take care
+           * rotating the file.
+           */
+          return false;
+        }
         future.cancel(true);
+        rollCaneledAppends.incrementAndGet();
       }
 
       // NOTE: there is no guarantee that this cancel actually succeeds.
@@ -293,7 +317,7 @@ public class RollSink extends EventSink.Base {
     LOG.info("closing RollSink '" + fspec + "'");
 
     // attempt to get the lock, and if we cannot, issue a cancel
-    while (!lock.writeLock().tryLock(1000, TimeUnit.MILLISECONDS)) {
+    while (!lock.writeLock().tryLock(timeOut, TimeUnit.MILLISECONDS)) {
       // interrupt the future on the other.
       if (future != null) {
         future.cancel(true);
@@ -329,12 +353,8 @@ public class RollSink extends EventSink.Base {
         return;
       }
       curSink.close();
-    } finally {
-      /* If the downstream sink throws an exception while closing, then its state
-       * is unknown. We want to play safe and remove its reference.from the roller
-       * so that the flow can continue.
-       */
       curSink = null;
+    } finally {
       lock.writeLock().unlock();
     }
   }
@@ -380,6 +400,7 @@ public class RollSink extends EventSink.Base {
     rpt.setLongMetric(A_ROLLS, rolls.get());
     rpt.setLongMetric(A_ROLLFAILS, rollfails.get());
     rpt.setStringMetric(A_ROLLSPEC, fspec);
+    rpt.setLongMetric(A_ROLL_ABORTED_APPENDS, rollCaneledAppends.get());
     return rpt;
   }
 
@@ -443,6 +464,13 @@ public class RollSink extends EventSink.Base {
     return rt;
   }
 
+  public void setTimeOut (long timeout) {
+    this.timeOut = timeout;
+    if (timeout == 0) {
+      forceInterrupt = false;
+    }
+  }
+
   /**
    * Builder for a spec based rolling sink. (most general version, does not
    * necessarily output to files!).
diff --git a/flume-core/src/test/java/com/cloudera/flume/collector/TestCollectorSink.java b/flume-core/src/test/java/com/cloudera/flume/collector/TestCollectorSink.java
index e735f38..4f25f58 100644
--- a/flume-core/src/test/java/com/cloudera/flume/collector/TestCollectorSink.java
+++ b/flume-core/src/test/java/com/cloudera/flume/collector/TestCollectorSink.java
@@ -22,18 +22,13 @@ import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.anyObject;
 import static org.mockito.Mockito.doThrow;
-import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
 
 import java.io.File;
 import java.io.FileFilter;
 import java.io.IOException;
 import java.util.Date;
 import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.List;
 import java.util.Set;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
@@ -922,98 +917,4 @@ public class TestCollectorSink {
       FileUtil.rmr(f);
     }
   }
-
-  /**
-   * This test verifies that when both append and close throw an exception
-   * the retry mechanism (stubborn append) reopens the sink and continues
-   * to flow event to the sink correctly
-   */
-  @SuppressWarnings("rawtypes")
-  @Test(timeout=5000)
-  public void testAppendCloseIOExceptionSink() throws IOException,
-      InterruptedException, FlumeSpecException {
-    final EventSink snk = mock(EventSink.class);
-    final List<String> result = new LinkedList<String> ();
-
-    // mock append that throws IOException on first invocation and
-    // then sets an attribute on second time
-    doThrow(new IOException("Force unexpected append error")).
-      doAnswer(new Answer () {
-        @Override
-        public Object answer(InvocationOnMock aInvocation)
-            throws Throwable {
-          result.add("success"); // append executed by retry sinks
-          return null;
-        }}).
-        when(snk).append((Event) anyObject());
-
-    doThrow(new IOException("Force unexpected close error")).doNothing().
-        when(snk).close();
-
-    doNothing().when(snk).open();
-    SinkBuilder sb = new SinkBuilder() {
-      @Override
-      public EventSink build(Context context, String... argv) {
-        return snk;
-      }
-    };
-    SinkFactoryImpl sf = new SinkFactoryImpl();
-    sf.setSink("mIOSink", sb);
-    FlumeBuilder.setSinkFactory(sf);
-
-    final EventSink coll = FlumeBuilder.buildSink(
-        LogicalNodeContext.testingContext(), "collector(5000) { mIOSink }");
-    coll.open();
-    coll.append(new EventImpl("foo".getBytes()));
-    coll.close();
-    assertEquals(result.get(0), "success");
-  }
-
-  /**
-  *
-  * This test verifies that when both append and close throw multiple
-  * consecutive exceptions, the retry mechanism (insistent append)
-  * reopens the sink and continues to flow event to the sink correctly
-  */
- @SuppressWarnings("rawtypes")
- @Test
- public void testMultiAppendCloseIOExceptionSink() throws IOException,
-     InterruptedException, FlumeSpecException {
-   final EventSink snk = mock(EventSink.class);
-   final List<String> result = new LinkedList<String> ();
-
-   // mock append that throws IOException on first two invocation and
-   // then sets an attribute on third time
-   doThrow(new IOException("Force unexpected append error")).
-     doThrow(new IOException("Force unexpected append error")).
-     doAnswer(new Answer () {
-       @Override
-       public Object answer(InvocationOnMock aInvocation)
-           throws Throwable {
-         result.add("success"); // append executed by retry sinks
-         return null;
-       }}).
-       when(snk).append((Event) anyObject());
-
-   doThrow(new IOException("Force unexpected close error")).
-     doNothing().when(snk).close();
-
-   doNothing().when(snk).open();
-   SinkBuilder sb = new SinkBuilder() {
-     @Override
-     public EventSink build(Context context, String... argv) {
-       return snk;
-     }
-   };
-   SinkFactoryImpl sf = new SinkFactoryImpl();
-   sf.setSink("mIOSink", sb);
-   FlumeBuilder.setSinkFactory(sf);
-
-   final EventSink coll = FlumeBuilder.buildSink(
-       LogicalNodeContext.testingContext(), "collector(5000) { mIOSink }");
-   coll.open();
-   coll.append(new EventImpl("foo".getBytes()));
-   coll.close();
-   assertEquals(result.get(0), "success");
- }
 }
diff --git a/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestRollRollTags.java b/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestRollRollTags.java
index 01d6574..ca84ec4 100644
--- a/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestRollRollTags.java
+++ b/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestRollRollTags.java
@@ -67,23 +67,23 @@ public class TestRollRollTags {
     assertEquals("second", Attributes.readString(e2, "duped"));
   }
 
-  @Test(expected = IllegalArgumentException.class)
+  @Test
   public void testRollRollConflict() throws IOException, FlumeSpecException,
       InterruptedException {
     EventSink snk = new CompositeSink(new Context(),
         "{value(\"rolltag\",\"foofoo\") =>   roll(10000) {null} } ");
     Event e = new EventImpl("foo".getBytes());
     snk.open();
-    snk.append(e); // should bork.
+    snk.append(e); // should not bork.
   }
 
-  @Test(expected = IllegalArgumentException.class)
+  @Test
   public void testRollRollBork() throws IOException, FlumeSpecException, InterruptedException {
     EventSink snk = new CompositeSink(new Context(),
         "roll(10000) { roll(10000) { null } } ");
     Event e = new EventImpl("foo".getBytes());
     snk.open();
-    snk.append(e); // should bork.
+    snk.append(e); // should not bork.
   }
 
   @Test
diff --git a/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestRollSink.java b/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestRollSink.java
index 761643d..424aecf 100644
--- a/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestRollSink.java
+++ b/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestRollSink.java
@@ -307,10 +307,13 @@ public class TestRollSink {
         try {
           roll.open();
           roll.append(e1); // append blocks.
-        } catch (InterruptedException e) {
+        } catch (RuntimeException eR) {
           latch.countDown();
           LOG.error("Exited with expected Exception");
           return;
+        } catch (InterruptedException e) {
+          latch.countDown();
+          LOG.error("Exited with expected Exception");
         } catch (IOException e) {
           LOG.info("Got the unexpected IOException exit", e);
           e.printStackTrace();
diff --git a/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestSlowSinkRoll.java b/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestSlowSinkRoll.java
new file mode 100644
index 0000000..13bd563
--- /dev/null
+++ b/flume-core/src/test/java/com/cloudera/flume/handlers/rolling/TestSlowSinkRoll.java
@@ -0,0 +1,205 @@
+/**
+ * Licensed to Cloudera, Inc. under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  Cloudera, Inc. licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.cloudera.flume.handlers.rolling;
+
+import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.doNothing;
+import static org.mockito.Mockito.doThrow;
+import static org.mockito.Mockito.mock;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import org.apache.log4j.Level;
+import org.codehaus.jettison.json.JSONException;
+import org.junit.Before;
+import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.cloudera.flume.conf.Context;
+import com.cloudera.flume.conf.FlumeBuilder;
+import com.cloudera.flume.conf.FlumeSpecException;
+import com.cloudera.flume.conf.LogicalNodeContext;
+import com.cloudera.flume.conf.ReportTestingContext;
+import com.cloudera.flume.conf.SinkFactory.SinkBuilder;
+import com.cloudera.flume.conf.SinkFactoryImpl;
+import com.cloudera.flume.core.Attributes;
+import com.cloudera.flume.core.Event;
+import com.cloudera.flume.core.EventImpl;
+import com.cloudera.flume.core.EventSink;
+import com.cloudera.flume.core.EventSource;
+import com.cloudera.flume.core.connector.DirectDriver;
+import com.cloudera.flume.handlers.hdfs.EscapedCustomDfsSink;
+import com.cloudera.flume.reporter.ReportEvent;
+import com.cloudera.flume.reporter.ReportManager;
+import com.cloudera.flume.reporter.ReportTestUtils;
+import com.cloudera.flume.reporter.ReportUtil;
+import com.cloudera.flume.reporter.aggregator.CounterSink;
+import com.cloudera.util.Clock;
+import com.cloudera.util.FileUtil;
+
+public class TestSlowSinkRoll {
+  public static final Logger LOG = LoggerFactory.getLogger(TestSlowSinkRoll.class);
+  public static final String NUM_EVENTS = "num_events";
+  public class DummySource extends EventSource.Base {
+    private static final int DEF_MAX_EVENTS = 10;
+    private final int maxEvents;
+
+    long counter;
+    public DummySource() {
+      maxEvents = DEF_MAX_EVENTS;
+    }
+
+    public DummySource(int maxEv) {
+      maxEvents = maxEv;
+    }
+
+    @Override
+    public Event next() throws InterruptedException {
+      if (counter == maxEvents) {
+        throw new InterruptedException("Max events exceeded");
+      }
+      counter++;
+      LOG.info("Generated event <junk" + counter + ">");
+      return new EventImpl(("junk" + counter + " ").getBytes());
+    }
+
+    @Override
+    public void close() throws InterruptedException {
+      LOG.info("close");
+    }
+
+    @Override
+    public void open() throws RuntimeException {
+      LOG.info("open");
+    }
+
+    public Long getCount() {
+      return counter;
+    }
+  };
+
+  @Before
+  public void setDebug() {
+    // log4j specific debugging level
+    org.apache.log4j.Logger.getRootLogger().setLevel(Level.DEBUG);
+  }
+
+  // the sink has a long delay, increase the roller's timeout and make sure that there
+  // are no events lost
+  @Test
+  public void testLongTimeout() throws IOException, InterruptedException {
+    final File f = FileUtil.mktempdir();
+    Logger rollLog = LoggerFactory.getLogger(RollSink.class);
+
+    RollSink snk = new RollSink(new Context(), "test", 2000, 250) {
+      @Override
+      protected EventSink newSink(Context ctx) throws IOException {
+        return new EscapedCustomDfsSink(ctx, "file:///" + f.getPath(),
+            "sub-%{service}%{rolltag}") {
+          @Override
+          public void append(final Event e) throws IOException, InterruptedException {
+            super.append(e);
+            Clock.sleep(1500);
+          }
+        };
+      }
+
+      @Override
+      synchronized public ReportEvent getMetrics() {
+        // the EvenSink getMetrics doesn't report num events, so use getReport() for now
+        ReportEvent rpt = super.getReport();
+        long cnt = rpt.getLongMetric(EventSink.Base.R_NUM_EVENTS);
+        rpt.setLongMetric(NUM_EVENTS, cnt);
+        return rpt;
+      }
+    };
+    snk.setTimeOut(2000);
+
+    DummySource source = new DummySource(7);
+    DirectDriver driver = new DirectDriver(source, snk);
+    driver.start();
+    Clock.sleep(12000);
+    driver.stop();
+
+    assertEquals(snk.getMetrics().getLongMetric(NUM_EVENTS), source.getCount());
+  }
+
+  // the sink has a long delay, make sure that slow append gets aborted by roller
+  @Test
+  public void testSlowSinkRoll() throws IOException, InterruptedException {
+    final File f = FileUtil.mktempdir();
+
+    RollSink snk = new RollSink(new Context(), "test", 2000, 250) {
+      @Override
+      protected EventSink newSink(Context ctx) throws IOException {
+        return new EscapedCustomDfsSink(ctx, "file:///" + f.getPath(),
+            "sub-%{service}%{rolltag}") {
+          @Override
+          public void append(final Event e) throws IOException, InterruptedException {
+            super.append(e);
+            Clock.sleep(1500);
+          }
+        };
+      }
+    };
+
+    DummySource source = new DummySource(4);
+    DirectDriver driver = new DirectDriver(source, snk);
+    driver.start();
+    Clock.sleep(12200);
+    driver.stop();
+    assertTrue(snk.getMetrics().getLongMetric(RollSink.A_ROLL_ABORTED_APPENDS) > Long.valueOf(0));
+  }
+
+  // the sink has a long delay and roll is configured to wait (timeout is 0 )
+  // make sure that roller waited for appends and there are no aborts
+  @Test
+  public void testWaitingSlowSinkRoll() throws IOException, InterruptedException {
+    final File f = FileUtil.mktempdir();
+
+    RollSink snk = new RollSink(new Context(), "test", 2000, 250) {
+      @Override
+      protected EventSink newSink(Context ctx) throws IOException {
+        return new EscapedCustomDfsSink(ctx, "file:///" + f.getPath(),
+            "sub-%{service}%{rolltag}") {
+          @Override
+          public void append(final Event e) throws IOException, InterruptedException {
+            super.append(e);
+            Clock.sleep(1500);
+          }
+        };
+      }
+    };
+    snk.setTimeOut(0);
+    DummySource source = new DummySource(4);
+    DirectDriver driver = new DirectDriver(source, snk);
+    driver.start();
+    Clock.sleep(12200);
+    driver.stop();
+    assertEquals(snk.getMetrics().getLongMetric(RollSink.A_ROLL_ABORTED_APPENDS), Long.valueOf(0));
+  }
+
+}
-- 
1.7.0.4

