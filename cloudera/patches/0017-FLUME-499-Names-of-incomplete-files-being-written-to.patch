From 3ac1f7b4d7f7597885150699271292890d5add94 Mon Sep 17 00:00:00 2001
From: E. Sammer <esammer@cloudera.com>
Date: Fri, 18 Mar 2011 17:10:32 -0400
Subject: [PATCH 17/65] FLUME-499: Names of incomplete files being written to hdfs should indicate they are incomplete

---
 RELEASENOTES                                       |    7 +
 .../flume/handlers/hdfs/CustomDfsSink.java         |   17 +-
 .../main/java/com/cloudera/util/PathManager.java   |  199 ++++++++++++++++++++
 .../java/com/cloudera/util/TestPathManager.java    |  166 ++++++++++++++++
 4 files changed, 382 insertions(+), 7 deletions(-)
 create mode 100644 flume-core/src/main/java/com/cloudera/util/PathManager.java
 create mode 100644 flume-core/src/test/java/com/cloudera/util/TestPathManager.java

diff --git a/RELEASENOTES b/RELEASENOTES
index 66f4244..131d94b 100644
--- a/RELEASENOTES
+++ b/RELEASENOTES
@@ -1,3 +1,10 @@
+Flume 0.9.5
+===========
+
+Files written by a collector now have a '.tmp' suffix that indicates
+that the file is still being written.  When the file is completed,
+this suffix is removed.
+
 Flume 0.9.4
 ===========
 
diff --git a/flume-core/src/main/java/com/cloudera/flume/handlers/hdfs/CustomDfsSink.java b/flume-core/src/main/java/com/cloudera/flume/handlers/hdfs/CustomDfsSink.java
index 4d5b7e7..5993d98 100644
--- a/flume-core/src/main/java/com/cloudera/flume/handlers/hdfs/CustomDfsSink.java
+++ b/flume-core/src/main/java/com/cloudera/flume/handlers/hdfs/CustomDfsSink.java
@@ -34,7 +34,6 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.cloudera.flume.conf.Context;
-import com.cloudera.flume.conf.FlumeBuilder.FunctionSpec;
 import com.cloudera.flume.conf.FlumeBuilder;
 import com.cloudera.flume.conf.FlumeConfiguration;
 import com.cloudera.flume.conf.FlumeSpecException;
@@ -44,6 +43,7 @@ import com.cloudera.flume.core.EventSink;
 import com.cloudera.flume.handlers.text.FormatFactory;
 import com.cloudera.flume.handlers.text.output.OutputFormat;
 import com.cloudera.flume.reporter.ReportEvent;
+import com.cloudera.util.PathManager;
 import com.google.common.base.Preconditions;
 
 /**
@@ -61,6 +61,7 @@ public class CustomDfsSink extends EventSink.Base {
   AtomicLong count = new AtomicLong();
   String path;
   Path dstPath;
+  PathManager pathManager;
 
   public CustomDfsSink(String path, OutputFormat format) {
     Preconditions.checkArgument(path != null);
@@ -83,10 +84,11 @@ public class CustomDfsSink extends EventSink.Base {
 
   @Override
   public void close() throws IOException {
-    LOG.info("Closing HDFS file: " + dstPath);
+    LOG.info("Closing HDFS file: " + pathManager.getOpenPath());
     writer.flush();
     LOG.info("done writing raw file to hdfs");
     writer.close();
+    pathManager.close();
     writer = null;
   }
 
@@ -103,22 +105,23 @@ public class CustomDfsSink extends EventSink.Base {
   public void open() throws IOException {
     FlumeConfiguration conf = FlumeConfiguration.get();
     FileSystem hdfs;
-
     String codecName = conf.getCollectorDfsCompressCodec();
     CompressionCodec codec = getCodec(conf, codecName);
 
     if (codec == null) {
       dstPath = new Path(path);
       hdfs = dstPath.getFileSystem(conf);
-      writer = hdfs.create(dstPath);
-      LOG.info("Creating HDFS file: " + dstPath.toString());
+      pathManager = new PathManager(hdfs, dstPath.getParent(), dstPath.getName());
+      writer = pathManager.open();
+      LOG.info("Creating HDFS file: " + pathManager.getOpenPath());
       return;
     }
 
     Compressor cmp = codec.createCompressor();
     dstPath = new Path(path + codec.getDefaultExtension());
     hdfs = dstPath.getFileSystem(conf);
-    writer = hdfs.create(dstPath);
+    pathManager = new PathManager(hdfs, dstPath.getParent(), dstPath.getName());
+    writer = pathManager.open();
     try {
       writer = codec.createOutputStream(writer, cmp);
     } catch (NullPointerException npe) {
@@ -130,7 +133,7 @@ public class CustomDfsSink extends EventSink.Base {
       throw new IOException("Unable to load compression codec " + codec);
     }
     LOG.info("Creating " + codec + " compressed HDFS file: "
-        + dstPath.toString());
+        + pathManager.getOpenPath());
   }
 
   private static boolean codecMatches(Class<? extends CompressionCodec> cls,
diff --git a/flume-core/src/main/java/com/cloudera/util/PathManager.java b/flume-core/src/main/java/com/cloudera/util/PathManager.java
new file mode 100644
index 0000000..5f00e20
--- /dev/null
+++ b/flume-core/src/main/java/com/cloudera/util/PathManager.java
@@ -0,0 +1,199 @@
+/**
+ * Licensed to Cloudera, Inc. under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  Cloudera, Inc. licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.cloudera.util;
+
+import java.io.IOException;
+import java.io.OutputStream;
+
+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.fs.Path;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * <p>
+ * A class that manages state transitions for files on a {@link FileSystem}.
+ * </p>
+ * <p>
+ * Primarily this is meant to manage file renaming through various states. There
+ * are four distinct states; NEW, OPEN, CLOSED, and INVALID (represented by
+ * {@link State}) and are defined as follows.
+ * <table>
+ * <tr>
+ * <th>State</th>
+ * <th>Description</th>
+ * </tr>
+ * <tr>
+ * <td>NEW</td>
+ * <td>The initial state. The file has not yet been {@link #open()}ed. The only
+ * valid action is to open the file.</td>
+ * </tr>
+ * <tr>
+ * <td>OPEN</td>
+ * <td>The file is open (i.e. {@link #open()} has been called) and an
+ * {@link OutputStream} is outstanding. The only valid action is to close the
+ * file.</td>
+ * </tr>
+ * <tr>
+ * <td>CLOSED</td>
+ * <td>The file has been closed (i.e. {@link #close()} has been called). No
+ * further action can be performed on this instance of {@link PathManager}. A
+ * future improvement would be to support append here.</td>
+ * </tr>
+ * <tr>
+ * <td>INVALID</td>
+ * <td>An error has occurred and no further action is possible. Any state can
+ * transition to INVALID. A future improvement would be to support recovery from
+ * this state. Currently this is not possible.</td>
+ * </tr>
+ * </table>
+ * </p>
+ * <p>
+ * When in the NEW state, no file exists. The user is expected to call
+ * {@link #open()}. On open, the file is created with an
+ * <q>open file</q> path name. This is
+ * {@code baseDirectory + File.separator + fileName + PathManager.openExtension}
+ * and should indicate to of the file system that this file is currently in use
+ * and should be avoided (if they desire consistency). When the developer is
+ * done writing data to the file's {@link OutputStream}, they should call
+ * {@link #close()}. This will transition to the CLOSED state and commit the
+ * file by renaming it (i.e. removing the {@link PathManager} .openExtension).
+ * </p>
+ * <p>
+ * It is possible to understand what state the file is in by calling
+ * {@link #getState()} and what the current {@link Path} is by using either
+ * {@link #getOpenPath()} or {@link #getClosedPath()}, respectively.
+ * </p>
+ */
+public class PathManager {
+
+  private static final Logger logger = LoggerFactory
+      .getLogger(PathManager.class);
+  private static final String openExtension = ".tmp";
+
+  private FileSystem fileSystem;
+  private Path baseDirectory;
+  private String fileName;
+  private State state;
+
+  private Path openPath;
+  private Path closedPath;
+
+  /**
+   * Create a new instance that will manage {@code fileName} in the directory
+   * specified by {@code baseDirectory}. The initial state is NEW.
+   *
+   * @param baseDirectory
+   *          A directory in which we can write files.
+   * @param fileName
+   *          The file name local part (e.g. foo.txt).
+   */
+  public PathManager(FileSystem fileSystem, Path baseDirectory, String fileName) {
+    this.fileSystem = fileSystem;
+    this.baseDirectory = baseDirectory;
+    this.fileName = fileName;
+    this.state = State.NEW;
+
+    this.openPath = new Path(baseDirectory, fileName + openExtension);
+    this.closedPath = new Path(baseDirectory, fileName);
+  }
+
+  /**
+   * Opens a file for write.
+   *
+   * @return An {@link OutputStream} for writing data.
+   * @throws IOException
+   */
+  public synchronized OutputStream open() throws IOException {
+
+    logger.debug("attempting to transition from " + state + " -> OPEN for "
+        + this);
+
+    switch (state) {
+    case NEW:
+      state = State.OPEN;
+
+      return fileSystem.create(openPath);
+
+    default:
+      state = State.INVALID;
+
+      throw new IllegalStateException("Illegal state transition from " + state
+          + " -> OPEN");
+    }
+  }
+
+  /**
+   * Transition a file from open to closed, renaming it appropriately. Note that
+   * this method doesn't close or flush the {@link OutputStream} returned by
+   * {@link #open()}.
+   *
+   * @return true upon successful rename, false otherwise.
+   * @throws IOException
+   */
+  public synchronized boolean close() throws IOException {
+
+    logger.debug("attempting to transition from " + state + " -> CLOSED for "
+        + this);
+
+    switch (state) {
+    case OPEN:
+      state = State.CLOSED;
+
+      return fileSystem.rename(openPath, closedPath);
+
+    default:
+      state = State.INVALID;
+
+      throw new IllegalStateException("Illegal state transition from " + state
+          + " -> CLOSED");
+    }
+  }
+
+  @Override
+  public String toString() {
+    return "{ fileName:" + fileName + " state:" + state + " baseDirectory:"
+        + baseDirectory + " openPath:" + openPath + " closedPath:" + closedPath
+        + " fileSystem:" + fileSystem + " }";
+  }
+
+  public Path getBaseDirectory() {
+    return baseDirectory;
+  }
+
+  public String getFileName() {
+    return fileName;
+  }
+
+  public State getState() {
+    return state;
+  }
+
+  public Path getOpenPath() {
+    return openPath;
+  }
+
+  public Path getClosedPath() {
+    return closedPath;
+  }
+
+  public static enum State {
+    NEW, OPEN, CLOSED, INVALID,
+  }
+
+}
diff --git a/flume-core/src/test/java/com/cloudera/util/TestPathManager.java b/flume-core/src/test/java/com/cloudera/util/TestPathManager.java
new file mode 100644
index 0000000..872971d
--- /dev/null
+++ b/flume-core/src/test/java/com/cloudera/util/TestPathManager.java
@@ -0,0 +1,166 @@
+/**
+ * Licensed to Cloudera, Inc. under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  Cloudera, Inc. licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.cloudera.util;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.FileSystem;
+import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.io.compress.CompressionCodecFactory;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class TestPathManager {
+
+  private static final Path testBaseDirectory = new Path(
+      "/tmp/flume-test-pathmanager");
+
+  private FileSystem fileSystem;
+
+  public TestPathManager() throws IOException {
+    fileSystem = FileSystem.get(new Configuration());
+  }
+
+  @Test
+  public void testStateTransitions() throws IOException {
+    PathManager pathManager = new PathManager(fileSystem, testBaseDirectory,
+        "test1");
+
+    Assert.assertNotNull(pathManager);
+
+    OutputStream outputStream = null;
+
+    Assert.assertFalse(fileSystem.exists(pathManager.getOpenPath()));
+    Assert.assertFalse(fileSystem.exists(pathManager.getClosedPath()));
+
+    try {
+      outputStream = pathManager.open();
+    } catch (IllegalStateException e) {
+      Assert.fail(e.getMessage());
+    }
+
+    Assert.assertNotNull(outputStream);
+    Assert.assertTrue(fileSystem.exists(pathManager.getOpenPath()));
+    Assert.assertFalse(fileSystem.exists(pathManager.getClosedPath()));
+
+    boolean success = false;
+
+    try {
+      outputStream.close();
+      success = pathManager.close();
+    } catch (IOException e) {
+      Assert.fail(e.getMessage());
+    } catch (IllegalStateException e) {
+      Assert.fail(e.getMessage());
+    }
+
+    Assert.assertTrue(success);
+    Assert.assertFalse(fileSystem.exists(pathManager.getOpenPath()));
+    Assert.assertTrue(fileSystem.exists(pathManager.getClosedPath()));
+
+    Assert.assertTrue(fileSystem.delete(testBaseDirectory, true));
+  }
+
+  @Test(expected = IllegalStateException.class)
+  public void testTransitionNewToClose() throws IOException {
+    PathManager pathManager = new PathManager(fileSystem, testBaseDirectory,
+        "test1");
+
+    Assert.assertNotNull(pathManager);
+
+    Assert.assertFalse(fileSystem.exists(pathManager.getOpenPath()));
+    Assert.assertFalse(fileSystem.exists(pathManager.getClosedPath()));
+
+    boolean success = false;
+
+    success = pathManager.close();
+
+    // We shouldn't get here.
+    Assert.assertFalse(success);
+    Assert.fail("Did not encounter the expected exception.");
+  }
+
+  @Test
+  public void testCompressedFile() throws IOException {
+    String testContent = "I am a simple test message\n";
+
+    PathManager pathManager = new PathManager(fileSystem, testBaseDirectory,
+        "test3.gz");
+
+    Assert.assertNotNull(pathManager);
+
+    Assert.assertFalse(fileSystem.exists(pathManager.getOpenPath()));
+    Assert.assertFalse(fileSystem.exists(pathManager.getClosedPath()));
+
+    OutputStream outputStream = null;
+
+    try {
+      outputStream = pathManager.open();
+
+      Assert.assertNotNull(outputStream);
+      Assert.assertTrue(fileSystem.exists(pathManager.getOpenPath()));
+      Assert.assertFalse(fileSystem.exists(pathManager.getClosedPath()));
+
+      outputStream = new CompressionCodecFactory(new Configuration()).getCodec(
+          new Path(pathManager.getFileName())).createOutputStream(outputStream);
+
+      Assert.assertNotNull(outputStream);
+
+      outputStream.write(testContent.getBytes());
+    } finally {
+      if (outputStream != null) {
+        outputStream.close();
+      }
+    }
+
+    boolean success = false;
+
+    success = pathManager.close();
+
+    Assert.assertTrue(success);
+    Assert.assertFalse(fileSystem.exists(pathManager.getOpenPath()));
+    Assert.assertTrue(fileSystem.exists(pathManager.getClosedPath()));
+
+    InputStream inputStream = null;
+
+    try {
+      inputStream = new CompressionCodecFactory(new Configuration()).getCodec(
+          pathManager.getClosedPath()).createInputStream(
+          fileSystem.open(pathManager.getClosedPath()));
+
+      byte[] buffer = new byte[512];
+      int length = inputStream.read(buffer);
+
+      Assert.assertTrue(length > 0);
+
+      String content = new String(buffer, 0, length);
+
+      Assert.assertEquals(testContent, content);
+    } finally {
+      if (inputStream != null) {
+        inputStream.close();
+      }
+    }
+
+    Assert.assertTrue(fileSystem.delete(testBaseDirectory, true));
+  }
+
+}
-- 
1.7.0.4

